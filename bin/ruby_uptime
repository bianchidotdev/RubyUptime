#!/usr/bin/env ruby

# TODO: implement service

require 'date'
require 'yaml'

require 'faraday'
require 'semantic_logger'
require 'pry'

$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
# $:.unshift(File.join(File.dirname(__FILE__), '..', 'config'))

require 'ruby_uptime'

include RubyUptime

binding.pry

# DEFAULTABLE_OPTIONS = ['frequency', 'protocol', 'endpoint', 'timeout', 'success_criteria']

# # TODO: move to networked DB
# options = (YAML.load_file '../checks.yaml')

# # check_options = RubyUptime::CheckConfig::CHECK_OPTIONS
# # binding.pry
# user_default_options = options['check_defaults']

# # Merge defaults
# DEFAULTABLE_OPTIONS.each do |defaultable_option|
#   check_options.each do |check_option|
#     check_option[defaultable_option] = check_option[defaultable_option] || user_default_options[defaultable_option]
#   end
# end

# logger = init_logger 'simple_uptime_logger'

# checks = create_checks(check_options)

# Check.log_header

# threads = {}
# loop do
#   checks.each do |check|
#     if check.next_time < Time.now.utc.to_f
#       threads[Time.now.utc.to_f] = Thread.new { eval_check check, logger }
#     end
#     sleep 0.001
#   end

#   sleep 0.1

#   # delete old threads
#   threads.each do |time, thread|
#     thread.kill if (time < Time.now.utc.to_f - 2)
#   end

#   threads = threads.select do |_time, thread|
#     thread.alive?
#   end

#   logger.warn("Spawning too many threads - #{threads}") if threads.count > (checks.count * 3)
# end
